import React, { createContext, useState, useEffect, useMemo, useContext } from 'react';
import { Observable } from 'windowed-observable';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ObservableProviderDisplayName = 'ObservableProvider';
var UseObservableError = "useObservable must be used within an " + ObservableProviderDisplayName;
function createReactObservable(namespace, options) {
  var observable = new Observable(namespace);
  var ObservableContext = createContext(undefined);

  var ObservableProvider = function ObservableProvider(_ref) {
    var children = _ref.children,
        onChange = _ref.onChange;

    // istanbul ignore next
    var _useState = useState({
      data: options == null ? void 0 : options.initialData,
      events: [],
      lastEvent: undefined
    }),
        data = _useState[0],
        setData = _useState[1];

    useEffect(function () {
      var observer = function observer(newData, _ref2) {
        var events = _ref2.events,
            lastEvent = _ref2.lastEvent;
        setData({
          data: newData,
          events: events,
          lastEvent: lastEvent
        });
      };

      observable.subscribe(observer);
      return function () {
        observable.unsubscribe(observer);
      };
    }, []);
    useEffect(function () {
      if (!onChange) {
        return;
      }

      observable.subscribe(onChange);
      return function () {
        observable.unsubscribe(onChange);
      };
    }, [onChange]);
    var value = useMemo(function () {
      return _extends({}, data, {
        publish: observable.publish
      });
    }, [data]);
    return React.createElement(ObservableContext.Provider, {
      value: value
    }, children);
  };

  ObservableProvider.displayName = ObservableProviderDisplayName;

  function useObservable() {
    var ctx = useContext(ObservableContext);

    if (ctx === undefined) {
      throw new Error(UseObservableError);
    }

    var publish = ctx.publish,
        context = _objectWithoutPropertiesLoose(ctx, ["publish"]);

    return [context, publish];
  }

  return {
    observable: observable,
    useObservable: useObservable,
    ObservableProvider: ObservableProvider
  };
}

export { createReactObservable };
//# sourceMappingURL=react-windowed-observable.esm.js.map
