{"version":3,"file":"react-windowed-observable.cjs.production.min.js","sources":["../src/context.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useEffect,\n  useState,\n  createContext,\n  FC,\n  useMemo,\n} from 'react';\nimport {\n  CreateReactObservableOptions,\n  ObservableContextValue,\n  ObservableData,\n  ObservableProviderProps,\n  ReactObservable,\n  UseObservableReturn,\n} from './types';\n\nimport { Observable, Observer } from 'windowed-observable';\n\nconst ObservableProviderDisplayName = 'ObservableProvider';\n\nexport const UseObservableError = `useObservable must be used within an ${ObservableProviderDisplayName}`;\n\nexport function createReactObservable<T = any>(\n  namespace: string,\n  options?: CreateReactObservableOptions<T>\n): ReactObservable<T> {\n  const observable = new Observable<T>(namespace);\n\n  const ObservableContext = createContext<\n    ObservableContextValue<T> | undefined\n  >(undefined);\n\n  const ObservableProvider: FC<ObservableProviderProps<T>> = ({\n    children,\n    onChange,\n  }) => {\n    // istanbul ignore next\n    const [data, setData] = useState<ObservableData<T>>({\n      data: options?.initialData,\n      events: [],\n      lastEvent: undefined,\n    });\n\n    useEffect(() => {\n      const observer: Observer<T> = (newData, { events, lastEvent }) => {\n        setData({ data: newData, events, lastEvent });\n      };\n\n      observable.subscribe(observer);\n\n      return () => {\n        observable.unsubscribe(observer);\n      };\n    }, []);\n\n    useEffect(() => {\n      if (!onChange) {\n        return;\n      }\n\n      observable.subscribe(onChange);\n\n      return () => {\n        observable.unsubscribe(onChange);\n      };\n    }, [onChange]);\n\n    const value = useMemo(\n      () => ({\n        ...data,\n        publish: observable.publish,\n      }),\n      [data]\n    );\n\n    return (\n      <ObservableContext.Provider value={value}>\n        {children}\n      </ObservableContext.Provider>\n    );\n  };\n\n  ObservableProvider.displayName = ObservableProviderDisplayName;\n\n  function useObservable(): UseObservableReturn<T> {\n    const ctx = useContext(ObservableContext);\n    if (ctx === undefined) {\n      throw new Error(UseObservableError);\n    }\n\n    const { publish, ...context } = ctx;\n\n    return [context, publish];\n  }\n\n  return {\n    observable,\n    useObservable,\n    ObservableProvider,\n  };\n}\n"],"names":["namespace","options","observable","Observable","ObservableContext","createContext","undefined","ObservableProvider","children","onChange","useState","data","initialData","events","lastEvent","setData","useEffect","observer","newData","subscribe","unsubscribe","value","useMemo","publish","React","Provider","displayName","useObservable","ctx","useContext","Error"],"mappings":"2aAwBEA,EACAC,OAEMC,EAAa,IAAIC,aAAcH,GAE/BI,EAAoBC,qBAExBC,GAEIC,EAAqD,gBACzDC,IAAAA,SACAC,IAAAA,WAGwBC,WAA4B,CAClDC,WAAMV,SAAAA,EAASW,YACfC,OAAQ,GACRC,eAAWR,IAHNK,OAAMI,OAMbC,aAAU,eACFC,EAAwB,SAACC,KAC7BH,EAAQ,CAAEJ,KAAMO,EAASL,SADeA,OACPC,YADeA,oBAIlDZ,EAAWiB,UAAUF,GAEd,WACLf,EAAWkB,YAAYH,MAExB,IAEHD,aAAU,cACHP,SAILP,EAAWiB,UAAUV,GAEd,WACLP,EAAWkB,YAAYX,MAExB,CAACA,QAEEY,EAAQC,WACZ,uBACKX,GACHY,QAASrB,EAAWqB,YAEtB,CAACZ,WAIDa,gBAACpB,EAAkBqB,UAASJ,MAAOA,GAChCb,WAKPD,EAAmBmB,YAhEiB,qBA6E7B,CACLxB,WAAAA,EACAyB,6BAZMC,EAAMC,aAAWzB,WACXE,IAARsB,QACI,IAAIE,qEAGJP,EAAwBK,EAAxBL,cAED,oIAFyBK,eAEfL,IAMjBhB,mBAAAA"}