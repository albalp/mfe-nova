{"version":3,"file":"windowed-observable.cjs.production.min.js","sources":["../src/observable.ts"],"sourcesContent":["import { Events, Observer, Observers } from './types';\n\nexport const EVENTS = '__events__';\nexport const SHARED = '__shared__';\nexport const OBSERVERS = '__observers__';\n\nexport class Observable<T = any> {\n  private _namespace!: string;\n\n  // istanbul ignore next\n  private static initialize() {\n    if (!window[SHARED]) {\n      window[SHARED] = {\n        [EVENTS]: {},\n        [OBSERVERS]: {},\n      };\n    }\n\n    if (!window[SHARED][EVENTS]) {\n      window[SHARED][EVENTS] = {};\n    }\n\n    if (!window[SHARED][OBSERVERS]) {\n      window[SHARED][OBSERVERS] = {};\n    }\n  }\n\n  constructor(namespace: string) {\n    Observable.initialize();\n\n    this.namespace = namespace;\n  }\n\n  set namespace(namespace: string) {\n    this._namespace = namespace;\n\n    // istanbul ignore next\n    if (!this.events) this.events = [];\n\n    // istanbul ignore next\n    if (!this.observers) this.observers = [];\n  }\n\n  private get events(): Events<T> {\n    return window[SHARED][EVENTS][this._namespace];\n  }\n\n  private set events(newEvents: Events<T>) {\n    window[SHARED][EVENTS][this._namespace] = newEvents;\n  }\n\n  private get observers(): Observers<T> {\n    return window[SHARED][OBSERVERS][this._namespace];\n  }\n\n  private set observers(newObservers: Observers<T>) {\n    window[SHARED][OBSERVERS][this._namespace] = newObservers;\n  }\n\n  getEvents(): Events<T> {\n    return this.events;\n  }\n\n  getLastEvent(): T | undefined {\n    const events = this.events;\n    if (!events.length) {\n      return;\n    }\n\n    const lastEvent = events[events.length - 1];\n\n    return lastEvent;\n  }\n\n  publish(data: T): void {\n    const events = this.events;\n    const lastEvent = this.getLastEvent();\n\n    this.observers.forEach((observer) => observer(data, { events, lastEvent }));\n\n    this.events.push(data);\n  }\n\n  dispatch = this.publish;\n\n  subscribe(observer: Observer<T>): void {\n    this.observers = this.observers.concat(observer);\n  }\n\n  unsubscribe(observer: Observer<T>): void {\n    this.observers = this.observers.filter((obs) => obs !== observer);\n  }\n\n  clear(): void {\n    const events = this.events;\n    const lastEvent = this.getLastEvent();\n\n    this.observers.forEach((observer) =>\n      observer(undefined, { events, lastEvent })\n    );\n\n    this.events = [];\n    this.observers = [];\n  }\n}\n"],"names":["EVENTS","SHARED","OBSERVERS","namespace","this","publish","Observable","initialize","window","getEvents","events","getLastEvent","length","data","lastEvent","observers","forEach","observer","push","subscribe","concat","unsubscribe","filter","obs","clear","undefined","_namespace","newEvents","newObservers"],"mappings":"oEAEO,IAAMA,EAAS,aACTC,EAAS,aACTC,EAAY,yDAuBXC,iBAwDDC,KAAKC,QAvDdC,EAAWC,kBAENJ,UAAYA,IApBJI,WAAP,iBACDC,OAAOP,KACVO,OAAOP,WACJD,GAAS,KACTE,GAAY,OAIZM,OAAOP,GAAQD,KAClBQ,OAAOP,GAAQD,GAAU,IAGtBQ,OAAOP,GAAQC,KAClBM,OAAOP,GAAQC,GAAa,kCAoChCO,UAAA,kBACSL,KAAKM,UAGdC,aAAA,eACQD,EAASN,KAAKM,UACfA,EAAOE,cAIMF,EAAOA,EAAOE,OAAS,MAK3CP,QAAA,SAAQQ,OACAH,EAASN,KAAKM,OACdI,EAAYV,KAAKO,oBAElBI,UAAUC,SAAQ,SAACC,UAAaA,EAASJ,EAAM,CAAEH,OAAAA,EAAQI,UAAAA,YAEzDJ,OAAOQ,KAAKL,MAKnBM,UAAA,SAAUF,QACHF,UAAYX,KAAKW,UAAUK,OAAOH,MAGzCI,YAAA,SAAYJ,QACLF,UAAYX,KAAKW,UAAUO,QAAO,SAACC,UAAQA,IAAQN,QAG1DO,MAAA,eACQd,EAASN,KAAKM,OACdI,EAAYV,KAAKO,oBAElBI,UAAUC,SAAQ,SAACC,UACtBA,OAASQ,EAAW,CAAEf,OAAAA,EAAQI,UAAAA,YAG3BJ,OAAS,QACTK,UAAY,sCArELZ,QACPuB,WAAavB,EAGbC,KAAKM,SAAQN,KAAKM,OAAS,IAG3BN,KAAKW,YAAWX,KAAKW,UAAY,0CAI/BP,OAAOP,GAAQD,GAAQI,KAAKsB,0BAGlBC,GACjBnB,OAAOP,GAAQD,GAAQI,KAAKsB,YAAcC,2CAInCnB,OAAOP,GAAQC,GAAWE,KAAKsB,0BAGlBE,GACpBpB,OAAOP,GAAQC,GAAWE,KAAKsB,YAAcE"}