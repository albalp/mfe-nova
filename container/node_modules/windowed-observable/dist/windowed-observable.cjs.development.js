'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var EVENTS = '__events__';
var SHARED = '__shared__';
var OBSERVERS = '__observers__';
var Observable = /*#__PURE__*/function () {
  function Observable(namespace) {
    this.dispatch = this.publish;
    Observable.initialize();
    this.namespace = namespace;
  } // istanbul ignore next


  Observable.initialize = function initialize() {
    if (!window[SHARED]) {
      var _window$SHARED;

      window[SHARED] = (_window$SHARED = {}, _window$SHARED[EVENTS] = {}, _window$SHARED[OBSERVERS] = {}, _window$SHARED);
    }

    if (!window[SHARED][EVENTS]) {
      window[SHARED][EVENTS] = {};
    }

    if (!window[SHARED][OBSERVERS]) {
      window[SHARED][OBSERVERS] = {};
    }
  };

  var _proto = Observable.prototype;

  _proto.getEvents = function getEvents() {
    return this.events;
  };

  _proto.getLastEvent = function getLastEvent() {
    var events = this.events;

    if (!events.length) {
      return;
    }

    var lastEvent = events[events.length - 1];
    return lastEvent;
  };

  _proto.publish = function publish(data) {
    var events = this.events;
    var lastEvent = this.getLastEvent();
    this.observers.forEach(function (observer) {
      return observer(data, {
        events: events,
        lastEvent: lastEvent
      });
    });
    this.events.push(data);
  };

  _proto.subscribe = function subscribe(observer) {
    this.observers = this.observers.concat(observer);
  };

  _proto.unsubscribe = function unsubscribe(observer) {
    this.observers = this.observers.filter(function (obs) {
      return obs !== observer;
    });
  };

  _proto.clear = function clear() {
    var events = this.events;
    var lastEvent = this.getLastEvent();
    this.observers.forEach(function (observer) {
      return observer(undefined, {
        events: events,
        lastEvent: lastEvent
      });
    });
    this.events = [];
    this.observers = [];
  };

  _createClass(Observable, [{
    key: "namespace",
    set: function set(namespace) {
      this._namespace = namespace; // istanbul ignore next

      if (!this.events) this.events = []; // istanbul ignore next

      if (!this.observers) this.observers = [];
    }
  }, {
    key: "events",
    get: function get() {
      return window[SHARED][EVENTS][this._namespace];
    },
    set: function set(newEvents) {
      window[SHARED][EVENTS][this._namespace] = newEvents;
    }
  }, {
    key: "observers",
    get: function get() {
      return window[SHARED][OBSERVERS][this._namespace];
    },
    set: function set(newObservers) {
      window[SHARED][OBSERVERS][this._namespace] = newObservers;
    }
  }]);

  return Observable;
}();

exports.Observable = Observable;
//# sourceMappingURL=windowed-observable.cjs.development.js.map
